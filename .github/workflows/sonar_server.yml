name: Static Analysis with Local SonarQube (Docker)

on:
  push:
    branches: ["main"]

jobs:
  sonarqube-scan:
    runs-on: ubuntu-latest

    services:
      sonarqube:
        image: sonarqube:9.9-community
        ports:
          - 9000:9000
        options: >-
          --health-cmd="curl --silent --fail http://localhost:9000/api/system/health | grep -q '"status":"GREEN"'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java (required for SonarQube)
        uses: actions/setup-java@v3
        with:
          java-version: '17'

      - name: Install sonar-scanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          sudo mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner
          echo "SONAR_SCANNER_HOME=/opt/sonar-scanner" >> $GITHUB_ENV
          echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH

      - name: Wait for SonarQube to be healthy
        run: |
          echo "Waiting for SonarQube..."
          until curl -s http://localhost:9000/api/system/health | grep -q '"status":"GREEN"'; do
            sleep 5
          done

      - name: Run Sonar Scanner
        env:
          SONAR_TOKEN: admin
        run: |
          sonar-scanner \
            -Dsonar.projectKey=my-local-project \
            -Dsonar.sources=src \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=${SONAR_TOKEN} \
            -Dsonar.python.coverage.reportPaths=coverage.xml || true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Generate sonar.json report
        if: always()
        env:
          SONAR_TOKEN: admin
        run: |
          curl -s -u ${SONAR_TOKEN}: http://localhost:9000/api/issues/search?componentKeys=my-local-project > issues.json
          curl -s -u ${SONAR_TOKEN}: http://localhost:9000/api/qualitygates/project_status?projectKey=my-local-project > quality_gate.json
          curl -s -u ${SONAR_TOKEN}: http://localhost:9000/api/measures/component?component=my-local-project&metricKeys=coverage,line_coverage,duplicated_lines_density,ncloc,complexity > measures.json

          jq -s '{
            timestamp: now,
            issues: .[0].issues,
            quality_gate: .[1].projectStatus,
            metrics: .[2].component.measures
          }' issues.json quality_gate.json measures.json > sonar.json

      - name: Upload sonar.json report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sonar-local-json-report
          path: sonar.json
