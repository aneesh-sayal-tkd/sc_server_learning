name: Static Analysis with SonarQube (Manual Docker)

on:
  push:
    branches: ["main"]

jobs:
  sonarqube-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java (required for SonarQube)
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install sonar-scanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          sudo mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner
          echo "SONAR_SCANNER_HOME=/opt/sonar-scanner" >> $GITHUB_ENV
          echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH

      - name: Start SonarQube (Docker)
        run: |
          docker run -d --name sonarqube \
            -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
            -e SONAR_WEB_JVM_OPTS="-Dsonar.security.realm=none" \
            -p 9000:9000 \
            sonarqube:9.9-community

      - name: Wait for SonarQube to be ready
        run: |
          echo "Waiting for SonarQube..."
          for i in {1..30}; do
            STATUS=$(curl -s http://localhost:9000/api/system/health | jq -r .status)
            if [[ "$STATUS" == "GREEN" ]]; then
              echo "SonarQube is ready!"
              break
            fi
            echo "SonarQube not ready yet (status=$STATUS), retrying..."
            sleep 5
          done

      - name: Run Sonar Scanner
        run: |
          sonar-scanner \
            -Dsonar.projectKey=my-local-project \
            -Dsonar.projectName=my-local-project \
            -Dsonar.sources=src \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=admin \
            -Dsonar.python.coverage.reportPaths=coverage.xml || true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Generate sonar.json report
        if: always()
        run: |
          curl -s -u admin: http://localhost:9000/api/issues/search?componentKeys=my-local-project > issues.json
          curl -s -u admin: http://localhost:9000/api/qualitygates/project_status?projectKey=my-local-project > quality_gate.json
          curl -s -u admin: http://localhost:9000/api/measures/component?component=my-local-project&metricKeys=coverage,line_coverage,duplicated_lines_density,ncloc,complexity > measures.json

          jq -s '{
            timestamp: now,
            issues: .[0].issues,
            quality_gate: .[1].projectStatus,
            metrics: .[2].component.measures
          }' issues.json quality_gate.json measures.json > sonar.json

      - name: Upload sonar.json report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sonar-local-json-report
          path: sonar.json

      - name: Fail if Sonar issues found
        if: always()
        run: |
          ISSUE_COUNT=$(jq '.issues | length' sonar.json)
          if [ "$ISSUE_COUNT" -gt 0 ]; then
            echo "❌ SonarQube found $ISSUE_COUNT issues"
            exit 1
          else
            echo "✅ No issues found by SonarQube"
          fi
